>What happens when you initialize a repository? Why do you need to do it?

when i initialize repository, a ".git" will be create. I have to do it because it is neccesary to track my files (it will save the commits).

>How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is use to make choice what changes i want to commit, because i want to keep the small size commit per logical changes. the value it offer is the changes of my file in working directory, and it convennience to commit what i want.

>How can you use the staging area to make sure you have one commit per logical change?

i can compare the staging area with the working directory to see the file(s) that have been changed, and after that, i add the file(s) that have been changed to the staging area, so the file in staging area and working directory is the same. After that, i want to commit the change(s), i compare the file(s) in staging area and the repository to double check it will be the changes i've made, and then i commit it, so it will commit only the file that have been changed (the file i want to change).

>What are some situations when branches would be helpful in keeping your history organized? How would branches help?

the situation the branches will be helppful is when i want to create another the version of my program (like adding features, add new language(s), etc.) but i'm not sure if it will work or not, so i create new branches to workout on that version, and if i find a bug on my main version, i can fix it and all the branches is up-to-date, and after finish develope a branch, i can merge it to main version.

>How do the diagrams help you visualize the branch structure?

it's make the branches more easier to see and find out the parents of them, the branch that can't reachable,.., easier to understand about the branch and have a clear visual on its.

>What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging to branches together is the two branches will become one, and we have the funtion on both of them. 
We use diagram to express the branches because it make us more easier to understand the branches that what we can reach, what we cannot.

>What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

pros:
	automatically merging:
		-convennient, we dont have to do anything if there is a conflict.
	manually merging:
		-we can choose the better one to keep, make sure it's will be the best in the final version.
cons:
	automatically merging:
		-it's may cause bug, errors or problem to the code, and it's may make the code cannot work anymore.
		-it's can't know what is the better one to keep, it's can learn to do that but this will not alway work right.
	manually merging:
		-cost time, sometime is too much because we have to find out what's the conflict in the others one code, but we can talk to that person and find the way to solve it.
		-if we not know what the conflict is or don't know what is better than to keep, we might cannot solve the conflict.